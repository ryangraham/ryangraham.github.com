'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _compassVerticalRhythm = require('compass-vertical-rhythm');

var _compassVerticalRhythm2 = _interopRequireDefault(_compassVerticalRhythm);

var _modularscale = require('modularscale');

var _modularscale2 = _interopRequireDefault(_modularscale);

var _createStyles = require('./utils/createStyles');

var _createStyles2 = _interopRequireDefault(_createStyles);

var _compileStyles = require('./utils/compileStyles');

var _compileStyles2 = _interopRequireDefault(_compileStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var typography = function typography(opts) {
  var defaults = {
    baseFontSize: '18px',
    baseLineHeight: '28.5px',
    modularScales: [{
      scale: 'octave'
    }, {
      scale: 'golden',
      maxWidth: '768px'
    }],
    googleFonts: [],
    headerFontFamily: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', 'sans-serif'],
    bodyFontFamily: ['georgia', 'serif'],
    headerGray: 20,
    headerGrayHue: 0,
    bodyGray: 20,
    bodyGrayHue: 0,
    headerWeight: 900,
    bodyWeight: 'normal',
    boldWeight: 'bold',
    includeNormalize: true,
    fontFaces: []
  };

  var options = (0, _objectAssign2.default)({}, defaults, opts);

  var vr = (0, _compassVerticalRhythm2.default)(options);

  return _extends({
    options: options
  }, vr, {
    createStyles: function createStyles() {
      return this.toString();
    },
    // TODO remove in next breaking release.
    fontSizeToPx: vr.adjustFontSizeTo,
    fontSizeToMS: function fontSizeToMS(scaler) {
      // This doesn't pick the right scale if a theme has more than one scale.
      // Perhaps add optional parameter for a width and it'll get the scale
      // for this width. Tricky part is maxWidth could be set in non-pixels.
      var baseFont = options.baseFontSize.slice(0, -2);
      var newFontSize = (0, _modularscale2.default)(scaler, options.modularScales[0].scale) * baseFont + 'px';
      return vr.adjustFontSizeTo(newFontSize);
    },
    toJSON: function toJSON() {
      return (0, _createStyles2.default)(vr, options);
    },
    toString: function toString() {
      return (0, _compileStyles2.default)(vr, options, this.toJSON());
    },
    injectStyles: function injectStyles() {
      if (typeof document !== 'undefined') {
        // Replace existing
        if (document.getElementById('typography.js')) {
          var styleNode = document.getElementById('typography.js');
          styleNode.innerHTML = this.toString();
        } else {
          var node = document.createElement('style');
          node.id = 'typography.js';
          node.innerHTML = this.toString();
          document.head.appendChild(node);
        }
      }
    }
  });
};

module.exports = typography;

/*
const test = typography({
  baseFontSize: '16px',
  includeNormalize: false,
})

console.log(test.toJSON())
console.log(test.toString())
*/