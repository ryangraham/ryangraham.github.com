'use strict';

var _typographyNormalize = require('typography-normalize');

var _typographyNormalize2 = _interopRequireDefault(_typographyNormalize);

var _decamelize = require('decamelize');

var _decamelize2 = _interopRequireDefault(_decamelize);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var generateFontFaceRules = function generateFontFaceRules(vr, options) {
  var styles = '';
  var properties = '';

  // Return if there's no font-faces defined.
  if (options.fontFaces == null || options.fontFaces.length <= 0) {
    return styles;
  }
  for (var i = 0; i < options.fontFaces.length; i++) {
    var fontFace = options.fontFaces[i];
    var srcs = fontFace.src.map(function (s) {
      return 'src:' + s + ';';
    });
    (0, _forEach2.default)(fontFace, function (v, k) {
      // eslint-disable-line
      if (k !== 'src') {
        properties += (0, _decamelize2.default)(k, '-') + ':' + v + ';\n';
      }
    });
    styles += '@font-face {\n  ' + properties + '\n  ' + srcs.join('\n') + '\n}';
  }

  return styles;
};

var compileStyles = function compileStyles(styles) {
  return (0, _reduce2.default)(styles, function (stylesStr, ruleSet, selector) {
    stylesStr += selector + '{'; // eslint-disable-line
    (0, _forEach2.default)(ruleSet, function (value, property) {
      if ((0, _isObject2.default)(value)) {
        var newObject = {};
        newObject[property] = value;
        stylesStr += compileStyles(newObject); // eslint-disable-line
      } else {
          stylesStr += (0, _decamelize2.default)(property, '-') + ':' + value + ';'; // eslint-disable-line
        }
    });
    stylesStr += '}'; // eslint-disable-line
    return stylesStr;
  }, '');
};

module.exports = function (vr, options, styles) {
  // Compile styles to string.
  var stylesStr = compileStyles(styles);
  stylesStr += '' + generateFontFaceRules(vr, options);

  if (options.includeNormalize) {
    stylesStr = '' + _typographyNormalize2.default + stylesStr;
  }

  return stylesStr;
};